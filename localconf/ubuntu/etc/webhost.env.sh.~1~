#!/bin/bash

source /etc/bash_functions >/dev/null

# Administrator account section
export ADMIN_HOME=/home/ubuntu
prepath "$ADMIN_HOME/scripts"
export ADMIN_USER=ubuntu
export ADMIN_GROUP=ubuntu # set this to the primary group of the host administrator account

# Misc section
export SYSTEM_TYPE=server
export NEWDAYHOUR=6 # server is UTC: day boundaries at midnight or 1am depending on daylight savings
export WEBHOST_DOMAIN=syntheticwebapps.com

cat >/dev/null <<END_COMMENTS

getHostAcct needs to determine the appropriate active hostacct for most webadmin and hostacct functions.

On the server, it's important to ensure that the user logged in is a valid registered HostAcct.
If the current user is ubuntu, a hostacct can be selected via command line option; the current $ACCOUNT variable can also suffice.
The normal case is we're already logged in as a hostacct user. Here, validate that it's a registered account.

Note that the admin account is NOT a valid hosting account. If you are logged in as the admin user, you MUST provide the desired account as $1
If this function succeeds, you will be moved to the HostAcct's top directory and have already sourced the account's environment configuration script.
It will fail if the HostAcct cannot be determined and validated and configured.

END_COMMENTS

function getHostAcct {
    local HostAcct=`whoami` MSG=
    if [ $HostAcct = $ADMIN_USER ] 
    then 
        HostAcct=$ACCOUNT
        [ "$1" ] && HostAcct="$1"
        MSG="Neither \$ACCOUNT nor the argument provided is a valid account."
    else
        MSG="Current user is not WebAdmin and is not registered as a valid account."
    fi
    [ "$HostAcct" -a -d "$ADMIN_HOME/accounts/$HostAcct" ] || 
        { echo "Can't identify hostacct. $MSG" ; return 1 ; } 
    pushd $ADMIN_HOME/accounts/$HostAcct &>/dev/null && cd -P . && source etc/account.env.sh
}

type fixReturn

