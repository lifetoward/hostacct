# Here we set up the open and secure VHosts for a single domain for a single account.
# Besides the general Apache and Webhost configuration, we also here rely on the following definitions:
# ACCOUNT - the simple name of the hosting account
# ACCOUNT_HOME - the location of the account's home directory
# DOMAIN - the public-facing domain name to be represented by the virtual hosts
# HANDLE - the short handle for the domain, used for locating content on the local system, etc.

<VirtualHost *:${APACHE_PORT}>

	ServerName ${DOMAIN}
	ServerAdmin ${ACCOUNT}@${WEBHOST_DOMAIN}
	# The document root provided here is not intended to be used. It should be overridden by the static service.
#	DocumentRoot ${ACCOUNT_HOME}/proxy/docroot

	UseCanonicalName On
	UseCanonicalPhysicalPort On

	# Below we set headers to share proxy's information with worker.
	# The approach may seem odd but was very hard won. 
	RequestHeader set Gateway-SiteName ${HANDLE}
		#
	RequestHeader unset Secure-Request
		#
	RewriteCond %{SERVER_PORT} (.*)
	RewriteRule .* - [E=GatePort:%1]
	RequestHeader set Gateway-Port %{GatePort}e
		#
	RewriteCond "%{REQUEST_SCHEME}://%{HTTP_HOST}%{REQUEST_URI}" (.*)
	RewriteRule .* - [E=GateReq:%1]
	RequestHeader set Gateway-Request %{GateReq}e

	# We make the account's CA certificate available on the open side so account staff can download and trust it.
	Alias /ca.crt "${ACCOUNT_HOME}/etc/account.ca.pem"
	<Directory "${ACCOUNT_HOME}/etc">
		<Files account.ca.pem>
			Require all granted
			ForceType application/x-x509-ca-cert
		</Files>
	</Directory>
	ProxyPass /ca.crt !

	# Working with ACMEPHP and LetsEncrypt, we need a location defined for sharing proofs of domain ownership.
	Alias /.well-known/acme-challenge/ "${ACCOUNT_HOME}/proxy/acmeproofs/${DOMAIN}/"
	<Directory "${ACCOUNT_HOME}/proxy/acmeproofs/${DOMAIN}">
		Require all granted
		ForceType text/plain
	</Directory>
	ProxyPass /.well-known/acme-challenge !


	# We load the account's services configuration with the DISPOSITION and HANDLE set. It should be a list of 
	# Includes, one for each service's proxy configuration file, but moderated by matching up sites with services
	# as defined in ~/etc/sites.
	Define DISPOSITION open
	Include "${ACCOUNT_HOME}/proxy/services.conf"

	# We log our secure and open VHosts separately
	ErrorLog ${ACCOUNT_HOME}/proxy/${VHOST_LOGPREFIX}${HANDLE}.open.log
	TransferLog ${ACCOUNT_HOME}/proxy/${VHOST_LOGPREFIX}${HANDLE}.open.log

</VirtualHost>

<VirtualHost *:${APACHE_SECPORT}>

	SSLEngine On
	#SSLCertificateChainFile ${ACCOUNT_HOME}/proxy/certs/CA-chain.pem
	SSLCertificateChainFile ${ACCOUNT_HOME}/.acmephp/master/certs/${DOMAIN}/chain.pem
	<Directory />
		SSLRequireSSL
	</Directory>

	ServerName ${DOMAIN}
	ServerAdmin ${ACCOUNT}@${WEBHOST_DOMAIN}
	# The document root provided here is not intended to be used. It should be overridden by the static service.
	#DocumentRoot ${ACCOUNT_HOME}/proxy/docroot

	UseCanonicalName On
	UseCanonicalPhysicalPort On

        # Below we set headers to share proxy's information with worker.
        # The approach may seem odd but was very hard won. 
        RequestHeader set Gateway-SiteName ${HANDLE}
                #
        RequestHeader set Secure-Request true
                #
        RewriteCond %{SERVER_PORT} (.*)
        RewriteRule .* - [E=GatePort:%1]
        RequestHeader set Gateway-Port %{GatePort}e
                #
        RewriteCond "%{REQUEST_SCHEME}://%{HTTP_HOST}%{REQUEST_URI}" (.*)
        RewriteRule .* - [E=GateReq:%1]
        RequestHeader set Gateway-Request %{GateReq}e

	Define DISPOSITION secure
	Include "${ACCOUNT_HOME}/proxy/services.conf"

	# These SSL settings establish the server's identity to clients
	SSLCertificateFile ${ACCOUNT_HOME}/.acmephp/master/certs/${DOMAIN}/cert.pem
	#SSLCertificateFile ${ACCOUNT_HOME}/proxy/certs/${HANDLE}.pem
	SSLCertificateKeyFile ${ACCOUNT_HOME}/.acmephp/master/private/${DOMAIN}/private.pem 
	#SSLCertificateKeyFile ${ACCOUNT_HOME}/proxy/keys/${HANDLE}.pem 

	# We log our secure vhosts separate from the open ones.
	ErrorLog ${ACCOUNT_HOME}/proxy/${VHOST_LOGPREFIX}${HANDLE}.secure.log
	TransferLog ${ACCOUNT_HOME}/proxy/${VHOST_LOGPREFIX}${HANDLE}.secure.log

</VirtualHost>

